import numpy as np
from sklearn.preprocessing import PolynomialFeatures
# 어떻게 보면 증폭이란 개념이라고 이해할 수 도 있다
# 선을 직선이 아니라 곡선으로 그을 수 있다 // y = wx^2 + bx +c 로 만들어준다
# 방법으로는 기존의 식에서 제곱을 해주면 된다 그럼 위와 같은 형식으로 바꿀 수 있다


x = np.arange(8).reshape(4,2)
print(x)
# [[0 1]   -> 0 ,0 ,1     -> y값        가운데 있는 숫자는 두개를 곱해준 것 
#  [2 3]   -> 4 ,6 ,9     -> y값 
#  [4 5]   -> 16 ,20 ,25  -> y값
#  [6 7]]  -> 36 ,42 ,49  -> y값

# pf = PolynomialFeatures(degree=2, include_bias=False )      # degree = 2차
# x_pf = pf.fit_transform(x)
# print(x_pf)
# [[ 0.  1.  0.  0.  1.]   앞의 2개는 원래 값 뒤에 3개는 제곱의 값
#  [ 2.  3.  4.  6.  9.]   이렇다 보니 데이터가 증폭하게 되고 
#  [ 4.  5. 16. 20. 25.]   성능이 좋아질 때도 잇고 나빠질때도 있다
#  [ 6.  7. 36. 42. 49.]]

pf = PolynomialFeatures(degree=3 , include_bias = False )      
# degree = 3차 함수로 바꿔줌 = a^3 + a^2b + ab^2 + b^3 // 3까지 쓸 경우는 많이 없음
# 원래 데이터 2 개 나오고 2차 함수 데이터 나오고 그 다음 3차 함수 데이터 나옴 
# include_bias = True 는 맨 앞 차원에 0^2 이 들어가서 1로 쓸모 없는 데이터가 생김 // True 가 default 
x_pf = pf.fit_transform(x)                                    
print(x_pf)

print('========================== 컬럼 3개 ==========================')

x = np.arange(12).reshape(4,3)
pf = PolynomialFeatures(degree=2, include_bias=False )      # degree = 2차
x_pf = pf.fit_transform(x)
print(x_pf)
# [[  0.   1.   2.   0.   0.   0.   1.   2.   4.]
#  [  3.   4.   5.   9.  12.  15.  16.  20.  25.]
#  [  6.   7.   8.  36.  42.  48.  49.  56.  64.]
#  [  9.  10.  11.  81.  90.  99. 100. 110. 121.]]

pf = PolynomialFeatures(degree = 3 , include_bias=False )      # degree = 3차
x_pf = pf.fit_transform(x)
print(x_pf)
# [[0.000e+00 1.000e+00 2.000e+00 0.000e+00 0.000e+00 0.000e+00 1.000e+00
#   2.000e+00 4.000e+00 0.000e+00 0.000e+00 0.000e+00 0.000e+00 0.000e+00
#   0.000e+00 1.000e+00 2.000e+00 4.000e+00 8.000e+00]
#  [3.000e+00 4.000e+00 5.000e+00 9.000e+00 1.200e+01 1.500e+01 1.600e+01
#   2.000e+01 2.500e+01 2.700e+01 3.600e+01 4.500e+01 4.800e+01 6.000e+01
#   7.500e+01 6.400e+01 8.000e+01 1.000e+02 1.250e+02]
#  [6.000e+00 7.000e+00 8.000e+00 3.600e+01 4.200e+01 4.800e+01 4.900e+01
#   5.600e+01 6.400e+01 2.160e+02 2.520e+02 2.880e+02 2.940e+02 3.360e+02
#   3.840e+02 3.430e+02 3.920e+02 4.480e+02 5.120e+02]
#  [9.000e+00 1.000e+01 1.100e+01 8.100e+01 9.000e+01 9.900e+01 1.000e+02
#   1.100e+02 1.210e+02 7.290e+02 8.100e+02 8.910e+02 9.000e+02 9.900e+02
#   1.089e+03 1.000e+03 1.100e+03 1.210e+03 1.331e+03]]
